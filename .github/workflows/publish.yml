name: Publish NPM package

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: '1.x'


      - name: Configure npm auth
        run: |
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc
          echo "registry=https://registry.npmjs.org/" >> ~/.npmrc
          echo "always-auth=true" >> ~/.npmrc

      - name: Install dependencies
        run: bun install

      - name: Test
        run: bun run test

      - name: Check published version on npm
        id: check
        run: |
          set -e
          CURRENT_VERSION=$(jq -r .version package.json)
          echo "Current version: $CURRENT_VERSION"
          PKG_NAME=$(jq -r .name package.json)
          echo "Package: $PKG_NAME"
          REGISTRY_JSON=$(curl -s https://registry.npmjs.org/${PKG_NAME} || echo '{"dist-tags":{"latest":"0.0.0"}}')
          PUBLISHED_VERSION=$(echo "$REGISTRY_JSON" | jq -r '."dist-tags".latest // "0.0.0"')
          echo "Published latest: $PUBLISHED_VERSION"

          if [ "$PUBLISHED_VERSION" != "$CURRENT_VERSION" ]; then
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "new_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Build
        if: steps.check.outputs.should_publish == 'true'
        run: bun run prepack

      - name: Publish to npm (via Bun)
        if: steps.check.outputs.should_publish == 'true'
        run: bun publish --access public

      - name: Tag release
        if: steps.check.outputs.should_publish == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag -a "v${{ steps.check.outputs.new_version }}" -m "v${{ steps.check.outputs.new_version }}"
          git push origin "v${{ steps.check.outputs.new_version }}"
